<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PactNet</name>
    </assembly>
    <members>
        <member name="T:PactNet.ConfiguredMessageVerifier">
            <summary>
            Verifies a configured message interaction
            </summary>
        </member>
        <member name="M:PactNet.ConfiguredMessageVerifier.#ctor(PactNet.Drivers.IMessageInteractionDriver,PactNet.PactConfig)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.ConfiguredMessageVerifier"/>
            </summary>
            <param name="driver">Pact driver</param>
            <param name="config">Pact configuration</param>
        </member>
        <member name="M:PactNet.ConfiguredMessageVerifier.Verify``1(System.Action{``0})">
            <summary>
            Verify a message is read and handled correctly and write the message pact
            </summary>
            <param name="handler">The method using the message</param>
        </member>
        <member name="M:PactNet.ConfiguredMessageVerifier.VerifyAsync``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Verify a message is read and handled correctly and write the message pact
            </summary>
            <param name="handler">The method using the message</param>
        </member>
        <member name="M:PactNet.ConfiguredMessageVerifier.MessageReified``1">
            <summary>
            Try to read the reified message
            </summary>
            <typeparam name="T">the type of message</typeparam>
            <returns>the message</returns>
        </member>
        <member name="T:PactNet.ConsumerContext">
            <summary>
            Context for consumer interaction verification
            </summary>
        </member>
        <member name="P:PactNet.ConsumerContext.MockServerUri">
            <summary>
            URI for the mock server
            </summary>
        </member>
        <member name="T:PactNet.Drivers.AbstractPactDriver">
            <summary>
            Abstract pact driver, agnostic of interaction style
            </summary>
        </member>
        <member name="M:PactNet.Drivers.AbstractPactDriver.#ctor(PactNet.Interop.PactHandle)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Drivers.AbstractPactDriver"/> class.
            </summary>
            <param name="pact">Pact handle</param>
        </member>
        <member name="M:PactNet.Drivers.AbstractPactDriver.WritePactFile(System.String)">
            <summary>
            Write the pact file to disk
            </summary>
            <param name="directory">Directory of the pact file</param>
            <returns>Status code</returns>
            <exception cref="T:System.InvalidOperationException">Failed to write pact file</exception>
        </member>
        <member name="T:PactNet.Drivers.HttpInteractionDriver">
            <summary>
            Driver for synchronous HTTP interactions
            </summary>
        </member>
        <member name="M:PactNet.Drivers.HttpInteractionDriver.#ctor(PactNet.Interop.PactHandle,PactNet.Interop.InteractionHandle)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Drivers.HttpInteractionDriver"/> class.
            </summary>
            <param name="pact">Pact handle</param>
            <param name="interaction">Interaction handle</param>
        </member>
        <member name="M:PactNet.Drivers.HttpInteractionDriver.Given(System.String)">
            <summary>
            Add a provider state to the interaction
            </summary>
            <param name="description">Provider state description</param>
            <returns>Success</returns>
        </member>
        <member name="M:PactNet.Drivers.HttpInteractionDriver.GivenWithParam(System.String,System.String,System.String)">
            <summary>
            Add a provider state with a parameter to the interaction
            </summary>
            <param name="description">Provider state description</param>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <returns>Success</returns>
        </member>
        <member name="M:PactNet.Drivers.HttpInteractionDriver.WithRequest(System.String,System.String)">
            <summary>
            Add a request to the interaction
            </summary>
            <param name="method">Request method</param>
            <param name="path">Request path</param>
        </member>
        <member name="M:PactNet.Drivers.HttpInteractionDriver.WithQueryParameter(System.String,System.String,System.UInt32)">
            <summary>
            Add a query string parameter to the interaction
            </summary>
            <param name="name">Query string parameter name</param>
            <param name="value">Parameter value</param>
            <param name="index">Parameter index (for if the same name is used multiple times)</param>
        </member>
        <member name="M:PactNet.Drivers.HttpInteractionDriver.WithRequestHeader(System.String,System.String,System.UInt32)">
            <summary>
            Set a request header
            </summary>
            <param name="name">header name</param>
            <param name="value">Header value</param>
            <param name="index">Header index (for if the same header is added multiple times)</param>
        </member>
        <member name="M:PactNet.Drivers.HttpInteractionDriver.WithResponseHeader(System.String,System.String,System.UInt32)">
            <summary>
            Set a response header
            </summary>
            <param name="name">header name</param>
            <param name="value">Header value</param>
            <param name="index">Header index (for if the same header is added multiple times)</param>
        </member>
        <member name="M:PactNet.Drivers.HttpInteractionDriver.WithResponseStatus(System.UInt16)">
            <summary>
            Set the response status
            </summary>
            <param name="status">Status code</param>
        </member>
        <member name="M:PactNet.Drivers.HttpInteractionDriver.WithRequestBody(System.String,System.String)">
            <summary>
            Set the request body
            </summary>
            <param name="contentType">Context type</param>
            <param name="body">Serialised body</param>
        </member>
        <member name="M:PactNet.Drivers.HttpInteractionDriver.WithResponseBody(System.String,System.String)">
            <summary>
            Set the response body
            </summary>
            <param name="contentType">Context type</param>
            <param name="body">Serialised body</param>
        </member>
        <member name="T:PactNet.Drivers.HttpPactDriver">
            <summary>
            Driver for synchronous HTTP pacts
            </summary>
        </member>
        <member name="M:PactNet.Drivers.HttpPactDriver.#ctor(PactNet.Interop.PactHandle)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Drivers.HttpPactDriver"/> class.
            </summary>
            <param name="pact">Pact handle</param>
        </member>
        <member name="M:PactNet.Drivers.HttpPactDriver.NewHttpInteraction(System.String)">
            <summary>
            Create a new interaction on the current pact
            </summary>
            <param name="description">Interaction description</param>
            <returns>HTTP interaction handle</returns>
        </member>
        <member name="M:PactNet.Drivers.HttpPactDriver.CreateMockServer(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Create the mock server for the current pact
            </summary>
            <param name="host">Host for the mock server</param>
            <param name="port">Port for the mock server, or null to allocate one automatically</param>
            <param name="tls">Enable TLS</param>
            <returns>Mock server port</returns>
            <exception cref="T:System.InvalidOperationException">Failed to start mock server</exception>
        </member>
        <member name="T:PactNet.Drivers.ICompletedPactDriver">
            <summary>
            Driver for writing completed pact files containing interactions
            </summary>
        </member>
        <member name="M:PactNet.Drivers.ICompletedPactDriver.WritePactFile(System.String)">
            <summary>
            Write the pact file to disk
            </summary>
            <param name="directory">Directory of the pact file</param>
            <returns>Status code</returns>
            <exception cref="T:System.InvalidOperationException">Failed to write pact file</exception>
        </member>
        <member name="T:PactNet.Drivers.IHttpInteractionDriver">
            <summary>
            Driver for synchronous HTTP interactions
            </summary>
        </member>
        <member name="M:PactNet.Drivers.IHttpInteractionDriver.WithRequest(System.String,System.String)">
            <summary>
            Add a request to the interaction
            </summary>
            <param name="method">Request method</param>
            <param name="path">Request path</param>
        </member>
        <member name="M:PactNet.Drivers.IHttpInteractionDriver.WithQueryParameter(System.String,System.String,System.UInt32)">
            <summary>
            Add a query string parameter to the interaction
            </summary>
            <param name="name">Query string parameter name</param>
            <param name="value">Parameter value</param>
            <param name="index">Parameter index (for if the same name is used multiple times)</param>
        </member>
        <member name="M:PactNet.Drivers.IHttpInteractionDriver.WithRequestHeader(System.String,System.String,System.UInt32)">
            <summary>
            Set a request header
            </summary>
            <param name="name">header name</param>
            <param name="value">Header value</param>
            <param name="index">Header index (for if the same header is added multiple times)</param>
        </member>
        <member name="M:PactNet.Drivers.IHttpInteractionDriver.WithResponseHeader(System.String,System.String,System.UInt32)">
            <summary>
            Set a response header
            </summary>
            <param name="name">header name</param>
            <param name="value">Header value</param>
            <param name="index">Header index (for if the same header is added multiple times)</param>
        </member>
        <member name="M:PactNet.Drivers.IHttpInteractionDriver.WithResponseStatus(System.UInt16)">
            <summary>
            Set the response status
            </summary>
            <param name="status">Status code</param>
        </member>
        <member name="M:PactNet.Drivers.IHttpInteractionDriver.WithRequestBody(System.String,System.String)">
            <summary>
            Set the request body
            </summary>
            <param name="contentType">Context type</param>
            <param name="body">Serialised body</param>
        </member>
        <member name="M:PactNet.Drivers.IHttpInteractionDriver.WithResponseBody(System.String,System.String)">
            <summary>
            Set the response body
            </summary>
            <param name="contentType">Context type</param>
            <param name="body">Serialised body</param>
        </member>
        <member name="T:PactNet.Drivers.IHttpPactDriver">
            <summary>
            Driver for synchronous HTTP pacts
            </summary>
        </member>
        <member name="M:PactNet.Drivers.IHttpPactDriver.NewHttpInteraction(System.String)">
            <summary>
            Create a new interaction on the current pact
            </summary>
            <param name="description">Interaction description</param>
            <returns>HTTP interaction handle</returns>
        </member>
        <member name="M:PactNet.Drivers.IHttpPactDriver.CreateMockServer(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Create the mock server for the current pact
            </summary>
            <param name="host">Host for the mock server</param>
            <param name="port">Port for the mock server, or null to allocate one automatically</param>
            <param name="tls">Enable TLS</param>
            <returns>Mock server port</returns>
            <exception cref="T:System.InvalidOperationException">Failed to start mock server</exception>
        </member>
        <member name="T:PactNet.Drivers.IMessageInteractionDriver">
            <summary>
            Driver for asynchronous message interactions
            </summary>
        </member>
        <member name="M:PactNet.Drivers.IMessageInteractionDriver.ExpectsToReceive(System.String)">
            <summary>
            Set the description of the message interaction
            </summary>
            <param name="description">message description</param>
        </member>
        <member name="M:PactNet.Drivers.IMessageInteractionDriver.WithMetadata(System.String,System.String)">
            <summary>
            Set the metadata of the message
            </summary>
            <param name="key">the key</param>
            <param name="value">the value</param>
        </member>
        <member name="M:PactNet.Drivers.IMessageInteractionDriver.WithContents(System.String,System.String,System.UInt32)">
            <summary>
            Set the contents of the message
            </summary>
            <param name="contentType">the content type</param>
            <param name="body">the body of the message</param>
            <param name="size">the size of the message</param>
        </member>
        <member name="M:PactNet.Drivers.IMessageInteractionDriver.Reify">
            <summary>
            Returns the message without the matchers
            </summary>
            <returns>Reified message</returns>
        </member>
        <member name="T:PactNet.Drivers.IMessagePactDriver">
            <summary>
            Driver for message pacts
            </summary>
        </member>
        <member name="M:PactNet.Drivers.IMessagePactDriver.NewMessageInteraction(System.String)">
            <summary>
            Create a new message interaction on the current pact
            </summary>
            <param name="description">Interaction description</param>
            <returns>Message interaction driver</returns>
        </member>
        <member name="M:PactNet.Drivers.IMessagePactDriver.WithMessagePactMetadata(System.String,System.String,System.String)">
            <summary>
            Add metadata to the message pact
            </summary>
            <param name="namespace">the namespace</param>
            <param name="name">the name of the parameter</param>
            <param name="value">the value of the parameter</param>
        </member>
        <member name="T:PactNet.Drivers.IMockServerDriver">
            <summary>
            Driver for managing a HTTP mock server
            </summary>
        </member>
        <member name="P:PactNet.Drivers.IMockServerDriver.Uri">
            <summary>
            Mock server URI
            </summary>
        </member>
        <member name="M:PactNet.Drivers.IMockServerDriver.MockServerMismatches">
            <summary>
            Get a string representing the mismatches following interaction testing
            </summary>
            <returns>Mismatch string</returns>
        </member>
        <member name="M:PactNet.Drivers.IMockServerDriver.MockServerLogs">
            <summary>
            Get a string representing the mock server logs following interaction testing
            </summary>
            <returns>Log string</returns>
        </member>
        <member name="T:PactNet.Drivers.InteropActionExtensions">
            <summary>
            Extensions for checking interop action success
            </summary>
        </member>
        <member name="M:PactNet.Drivers.InteropActionExtensions.CheckInteropSuccess(System.Boolean)">
            <summary>
            Check the result of an interop action to ensure it succeeded
            </summary>
            <param name="success">Action succeeded</param>
            <exception cref="T:PactNet.Exceptions.PactFailureException">Action failed</exception>
        </member>
        <member name="T:PactNet.Drivers.IPactDriver">
            <summary>
            Driver for creating a new pact and 
            </summary>
        </member>
        <member name="M:PactNet.Drivers.IPactDriver.NewHttpPact(System.String,System.String,PactNet.Interop.PactSpecification)">
            <summary>
            Create a new HTTP pact
            </summary>
            <param name="consumerName">Consumer name</param>
            <param name="providerName">Provider name</param>
            <param name="version">Specification version</param>
            <returns>HTTP pact driver</returns>
        </member>
        <member name="M:PactNet.Drivers.IPactDriver.NewMessagePact(System.String,System.String,PactNet.Interop.PactSpecification)">
            <summary>
            Create a new message pact
            </summary>
            <param name="consumerName">Consumer name</param>
            <param name="providerName">Provider name</param>
            <param name="version">Specification version</param>
            <returns>Message pact driver driver</returns>
        </member>
        <member name="M:PactNet.Drivers.IPactDriver.DriverLogs">
            <summary>
            Get the driver logs
            </summary>
            <returns>Logs</returns>
        </member>
        <member name="T:PactNet.Drivers.IProviderStateDriver">
            <summary>
            Driver for setting provider states on an interaction
            </summary>
        </member>
        <member name="M:PactNet.Drivers.IProviderStateDriver.Given(System.String)">
            <summary>
            Add a provider state to the interaction
            </summary>
            <param name="description">Provider state description</param>
        </member>
        <member name="M:PactNet.Drivers.IProviderStateDriver.GivenWithParam(System.String,System.String,System.String)">
            <summary>
            Add a provider state with a parameter to the interaction
            </summary>
            <param name="description">Provider state description</param>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="T:PactNet.Drivers.MessageInteractionDriver">
            <summary>
            Driver for asynchronous message interactions
            </summary>
        </member>
        <member name="M:PactNet.Drivers.MessageInteractionDriver.#ctor(PactNet.Interop.PactHandle,PactNet.Interop.InteractionHandle)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Drivers.MessageInteractionDriver"/> class.
            </summary>
            <param name="pact">Pact handle</param>
            <param name="interaction">Interaction handle</param>
        </member>
        <member name="M:PactNet.Drivers.MessageInteractionDriver.Given(System.String)">
            <summary>
            Add a provider state to the interaction
            </summary>
            <param name="description">Provider state description</param>
        </member>
        <member name="M:PactNet.Drivers.MessageInteractionDriver.GivenWithParam(System.String,System.String,System.String)">
            <summary>
            Add a provider state with a parameter to the interaction
            </summary>
            <param name="description">Provider state description</param>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:PactNet.Drivers.MessageInteractionDriver.ExpectsToReceive(System.String)">
            <summary>
            Set the description of the message interaction
            </summary>
            <param name="description">message description</param>
        </member>
        <member name="M:PactNet.Drivers.MessageInteractionDriver.WithMetadata(System.String,System.String)">
            <summary>
            Set the metadata of the message
            </summary>
            <param name="key">the key</param>
            <param name="value">the value</param>
        </member>
        <member name="M:PactNet.Drivers.MessageInteractionDriver.WithContents(System.String,System.String,System.UInt32)">
            <summary>
            Set the contents of the message
            </summary>
            <param name="contentType">the content type</param>
            <param name="body">the body of the message</param>
            <param name="size">the size of the message</param>
        </member>
        <member name="M:PactNet.Drivers.MessageInteractionDriver.Reify">
            <summary>
            Returns the message without the matchers
            </summary>
            <returns>Reified message</returns>
        </member>
        <member name="T:PactNet.Drivers.MessagePactDriver">
            <summary>
            Driver for message pacts
            </summary>
        </member>
        <member name="M:PactNet.Drivers.MessagePactDriver.#ctor(PactNet.Interop.PactHandle)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Drivers.MessagePactDriver"/> class.
            </summary>
            <param name="pact">Pact handle</param>
        </member>
        <member name="M:PactNet.Drivers.MessagePactDriver.NewMessageInteraction(System.String)">
            <summary>
            Create a new message interaction on the current pact
            </summary>
            <param name="description">Interaction description</param>
            <returns>Message interaction driver</returns>
        </member>
        <member name="M:PactNet.Drivers.MessagePactDriver.WithMessagePactMetadata(System.String,System.String,System.String)">
            <summary>
            Add metadata to the message pact
            </summary>
            <param name="namespace">the namespace</param>
            <param name="name">the name of the parameter</param>
            <param name="value">the value of the parameter</param>
        </member>
        <member name="T:PactNet.Drivers.MockServerDriver">
            <summary>
            Driver for managing a HTTP mock server
            </summary>
        </member>
        <member name="P:PactNet.Drivers.MockServerDriver.Uri">
            <summary>
            Mock server URI
            </summary>
        </member>
        <member name="M:PactNet.Drivers.MockServerDriver.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Drivers.MockServerDriver"/> class.
            </summary>
            <param name="host">Mock server host</param>
            <param name="port">Mock server port</param>
            <param name="tls">Is the mock server hosted via TLS?</param>
        </member>
        <member name="M:PactNet.Drivers.MockServerDriver.MockServerMismatches">
            <summary>
            Get a string representing the mismatches following interaction testing
            </summary>
            <returns>Mismatch string</returns>
        </member>
        <member name="M:PactNet.Drivers.MockServerDriver.MockServerLogs">
            <summary>
            Get a string representing the mock server logs following interaction testing
            </summary>
            <returns>Log string</returns>
        </member>
        <member name="M:PactNet.Drivers.MockServerDriver.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PactNet.Drivers.MockServerDriver.Finalize">
            <summary>
            Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:PactNet.Drivers.MockServerDriver.ReleaseUnmanagedResources">
            <summary>
            Release unmanaged resources
            </summary>
        </member>
        <member name="T:PactNet.Drivers.PactDriver">
            <summary>
            Driver for creating new pacts
            </summary>
        </member>
        <member name="M:PactNet.Drivers.PactDriver.NewHttpPact(System.String,System.String,PactNet.Interop.PactSpecification)">
            <summary>
            Create a new HTTP pact
            </summary>
            <param name="consumerName">Consumer name</param>
            <param name="providerName">Provider name</param>
            <param name="version">Specification version</param>
            <returns>HTTP pact driver</returns>
        </member>
        <member name="M:PactNet.Drivers.PactDriver.NewMessagePact(System.String,System.String,PactNet.Interop.PactSpecification)">
            <summary>
            Create a new message pact
            </summary>
            <param name="consumerName">Consumer name</param>
            <param name="providerName">Provider name</param>
            <param name="version">Specification version</param>
            <returns>Message pact driver driver</returns>
        </member>
        <member name="M:PactNet.Drivers.PactDriver.DriverLogs">
            <summary>
            Get the driver logs
            </summary>
            <returns>Logs</returns>
        </member>
        <member name="T:PactNet.Internal.Guard">
            <summary>
            Guard methods
            </summary>
        </member>
        <member name="M:PactNet.Internal.Guard.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures a string is not null or empty
            </summary>
            <param name="value">String value to check</param>
            <param name="name">Original variable name</param>
            <exception cref="T:System.ArgumentException">Value was null or empty</exception>
        </member>
        <member name="M:PactNet.Internal.Guard.NotNull(System.Object,System.String)">
            <summary>
            Ensures a value is not null
            </summary>
            <param name="value">Value to check</param>
            <param name="name">Original variable name</param>
        </member>
        <member name="T:PactNet.Interop.NativeInterop">
            <summary>
            Interop definitions to the Pact FFI library
            </summary>
        </member>
        <member name="T:PactNet.MessageBuilder">
            <summary>
            Mock request message builder
            </summary>
        </member>
        <member name="M:PactNet.MessageBuilder.#ctor(PactNet.Drivers.IMessageInteractionDriver,PactNet.PactConfig)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.MessagePactBuilder"/> class.
            </summary>
            <param name="server">Interaction driver</param>
            <param name="config">Pact config</param>
        </member>
        <member name="M:PactNet.MessageBuilder.PactNet#IMessageBuilderV3#Given(System.String)">
            <inheritdoc cref="T:PactNet.IMessageBuilderV3"/>
        </member>
        <member name="M:PactNet.MessageBuilder.PactNet#IMessageBuilderV3#Given(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc cref="T:PactNet.IMessageBuilderV3"/>
        </member>
        <member name="M:PactNet.MessageBuilder.PactNet#IMessageBuilderV3#WithMetadata(System.String,System.String)">
            <inheritdoc cref="T:PactNet.IMessageBuilderV3"/>
        </member>
        <member name="M:PactNet.MessageBuilder.PactNet#IMessageBuilderV3#WithJsonContent(System.Object)">
            <inheritdoc cref="T:PactNet.IMessageBuilderV3"/>
        </member>
        <member name="M:PactNet.MessageBuilder.PactNet#IMessageBuilderV3#WithJsonContent(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <inheritdoc cref="T:PactNet.IMessageBuilderV3"/>
        </member>
        <member name="M:PactNet.MessageBuilder.Given(System.String)">
            <summary>
            Add a provider state
            </summary>
            <param name="providerState">Provider state description</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.MessageBuilder.Given(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Add a provider state with one or more parameters
            </summary>
            <param name="providerState">Provider state description</param>
            <param name="parameters">Provider state parameters</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.MessageBuilder.WithMetadata(System.String,System.String)">
            <summary>
            Set the metadata
            </summary>
            <param name="key">key of the metadata</param>
            <param name="value">value of the metadata</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.MessageBuilder.WithJsonContent(System.Object)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.MessageBuilder.WithJsonContent(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="settings">Custom JSON serializer settings</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="T:PactNet.MessagePactBuilder">
            <summary>
            Mock request builder
            </summary>
        </member>
        <member name="M:PactNet.MessagePactBuilder.#ctor(PactNet.Drivers.IMessagePactDriver,PactNet.PactConfig)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.MessagePactBuilder"/> class.
            </summary>
            <param name="pact">Pact driver</param>
            <param name="config">the message pact configuration</param>
        </member>
        <member name="M:PactNet.MessagePactBuilder.PactNet#IMessagePactBuilderV3#ExpectsToReceive(System.String)">
            <inheritdoc cref="T:PactNet.IMessagePactBuilderV3"/>
        </member>
        <member name="M:PactNet.MessagePactBuilder.PactNet#IMessagePactBuilderV3#WithPactMetadata(System.String,System.String,System.String)">
            <inheritdoc cref="T:PactNet.IMessagePactBuilderV3"/>
        </member>
        <member name="M:PactNet.MessagePactBuilder.ExpectsToReceive(System.String)">
            <summary>
            Add a new message to the message pact
            </summary>
            <param name="description">Message description</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.MessagePactBuilder.WithPactMetadata(System.String,System.String,System.String)">
            <summary>
            Add a new metadata to the message pact
            </summary>
            <param name="namespace">the parent configuration section</param>
            <param name="name">the metadata field value</param>
            <param name="value">the metadata field value</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="T:PactNet.Models.NativeMessage">
            <summary>
            Placeholder for native message from backend
            </summary>
        </member>
        <member name="P:PactNet.Models.NativeMessage.Contents">
            <summary>
            The content
            </summary>
        </member>
        <member name="P:PactNet.Models.NativeMessage.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="T:PactNet.PactBuilder">
            <summary>
            Pact builder for the native backend
            </summary>
        </member>
        <member name="M:PactNet.PactBuilder.#ctor(PactNet.Drivers.IHttpPactDriver,PactNet.PactConfig,System.Nullable{System.Int32},PactNet.Models.IPAddress)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.PactBuilder"/> class.
            </summary>
            <param name="pact">Pact driver</param>
            <param name="config">Pact config</param>
            <param name="port">Optional port, otherwise one is dynamically allocated</param>
            <param name="host">Optional host, otherwise loopback is used</param>
        </member>
        <member name="M:PactNet.PactBuilder.PactNet#IPactBuilderV2#UponReceiving(System.String)">
            <summary>
            Add a new interaction to the pact
            </summary>
            <param name="description">Interaction description</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.PactBuilder.PactNet#IPactBuilderV3#UponReceiving(System.String)">
            <summary>
            Add a new interaction to the pact
            </summary>
            <param name="description">Interaction description</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.PactBuilder.UponReceiving(System.String)">
            <summary>
            Create a new request/response interaction
            </summary>
            <param name="description">Interaction description</param>
            <returns>Request builder</returns>
        </member>
        <member name="M:PactNet.PactBuilder.Verify(System.Action{PactNet.IConsumerContext})">
            <summary>
            Verify the configured interactions
            </summary>
            <param name="interact">Action to perform the real interactions against the mock driver</param>
            <exception cref="T:PactNet.Exceptions.PactFailureException">Failed to verify the interactions</exception>
        </member>
        <member name="M:PactNet.PactBuilder.VerifyAsync(System.Func{PactNet.IConsumerContext,System.Threading.Tasks.Task})">
            <summary>
            Verify the configured interactions
            </summary>
            <param name="interact">Action to perform the real interactions against the mock driver</param>
            <exception cref="T:PactNet.Exceptions.PactFailureException">Failed to verify the interactions</exception>
        </member>
        <member name="M:PactNet.PactBuilder.StartMockServer">
            <summary>
            Start the mock driver
            </summary>
            <returns>Mock driver</returns>
        </member>
        <member name="M:PactNet.PactBuilder.VerifyInternal(PactNet.Drivers.IMockServerDriver)">
            <summary>
            Verify the interactions after the consumer client has been invoked
            </summary>
            <param name="mockServer">Mock server</param>
        </member>
        <member name="M:PactNet.PactBuilder.PrintLogs(PactNet.Drivers.IMockServerDriver)">
            <summary>
            Print logs to the configured outputs
            </summary>
            <param name="mockServer">Mock server</param>
        </member>
        <member name="T:PactNet.PactExtensions">
            <summary>
            Extensions for <see cref="T:PactNet.Pact"/>
            </summary>
        </member>
        <member name="M:PactNet.PactExtensions.UsingNativeBackend(PactNet.IPactV2,System.Nullable{System.Int32},PactNet.Models.IPAddress)">
            <summary>
            Establish a new pact using the native backend
            </summary>
            <param name="pact">Pact details</param>
            <param name="port">Port for the mock server. If null, one will be assigned automatically</param>
            <param name="host">Host for the mock server</param>
            <returns>Pact builder</returns>
            <remarks>
            If multiple mock servers are started at the same time, you must make sure you don't supply the same port twice.
            It is advised that the port is not specified whenever possible to allow PactNet to allocate a port dynamically
            and ensure there are no port clashes
            </remarks>
        </member>
        <member name="M:PactNet.PactExtensions.UsingNativeBackend(PactNet.IPactV3,System.Nullable{System.Int32},PactNet.Models.IPAddress)">
            <summary>
            Establish a new pact using the native backend
            </summary>
            <param name="pact">Pact details</param>
            <param name="port">Port for the mock server. If null, one will be assigned automatically</param>
            <param name="host">Host for the mock server</param>
            <returns>Pact builder</returns>
            <remarks>
            If multiple mock servers are started at the same time, you must make sure you don't supply the same port twice.
            It is advised that the port is not specified whenever possible to allow PactNet to allocate a port dynamically
            and ensure there are no port clashes
            </remarks>
        </member>
        <member name="M:PactNet.PactExtensions.WithHttpInteractions(PactNet.IPactV2,System.Nullable{System.Int32},PactNet.Models.IPAddress)">
            <summary>
            Establish a new pact using the native backend
            </summary>
            <param name="pact">Pact details</param>
            <param name="port">Port for the mock server. If null, one will be assigned automatically</param>
            <param name="host">Host for the mock server</param>
            <returns>Pact builder</returns>
            <remarks>
            If multiple mock servers are started at the same time, you must make sure you don't supply the same port twice.
            It is advised that the port is not specified whenever possible to allow PactNet to allocate a port dynamically
            and ensure there are no port clashes
            </remarks>
        </member>
        <member name="M:PactNet.PactExtensions.WithHttpInteractions(PactNet.IPactV3,System.Nullable{System.Int32},PactNet.Models.IPAddress)">
            <summary>
            Establish a new pact using the native backend
            </summary>
            <param name="pact">Pact details</param>
            <param name="port">Port for the mock server. If null, one will be assigned automatically</param>
            <param name="host">Host for the mock server</param>
            <returns>Pact builder</returns>
            <remarks>
            If multiple mock servers are started at the same time, you must make sure you don't supply the same port twice.
            It is advised that the port is not specified whenever possible to allow PactNet to allocate a port dynamically
            and ensure there are no port clashes
            </remarks>
        </member>
        <member name="M:PactNet.PactExtensions.UsingNativeBackend(PactNet.IMessagePactV3)">
            <summary>
            Establish a new message pact using the native backend
            </summary>
            <param name="messagePact">Message Pact details</param>
            <returns>Pact builder</returns>
        </member>
        <member name="M:PactNet.PactExtensions.WithMessageInteractions(PactNet.IPactV3)">
            <summary>
            Add asynchronous message (i.e. consumer/producer) interactions to the pact
            </summary>
            <param name="pact">Pact details</param>
            <returns>Pact builder</returns>
        </member>
        <member name="M:PactNet.PactExtensions.InitialiseLogging(PactNet.PactLogLevel)">
            <summary>
            Initialise logging in the native library
            </summary>
            <param name="level">Log level</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid log level</exception>
            <remarks>Logging can only be initialised **once**. Subsequent calls will have no effect</remarks>
        </member>
        <member name="T:PactNet.RequestBuilder">
            <summary>
            Mock request builder
            </summary>
        </member>
        <member name="M:PactNet.RequestBuilder.#ctor(PactNet.Drivers.IHttpInteractionDriver,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.RequestBuilder"/> class.
            </summary>
            <param name="driver">Interaction driver</param>
            <param name="defaultSettings">Default JSON serializer settings</param>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV2#Given(System.String)">
            <summary>
            Add a provider state
            </summary>
            <param name="providerState">Provider state description</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV2#WithRequest(System.Net.Http.HttpMethod,System.String)">
            <summary>
            Set the request
            </summary>
            <param name="method">Request method</param>
            <param name="path">Request path</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV2#WithRequest(System.String,System.String)">
            <summary>
            Set the request
            </summary>
            <param name="method">Request method</param>
            <param name="path">Request path</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV2#WithQuery(System.String,System.String)">
            <summary>
            Add a query string parameter
            </summary>
            <param name="key">Query parameter key</param>
            <param name="value">Query parameter value</param>
            <returns>Fluent builder</returns>
            <remarks>You can add a query parameter with the same key multiple times</remarks>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV2#WithHeader(System.String,System.String)">
            <summary>
            Add a request header
            </summary>
            <param name="key">Header key</param>
            <param name="value">Header value</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV2#WithHeader(System.String,PactNet.Matchers.IMatcher)">
            <summary>
            Add a request header matcher
            </summary>
            <param name="key">Header key</param>
            <param name="matcher">Header value matcher</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV2#WithJsonBody(System.Object)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV2#WithJsonBody(System.Object,System.String)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="contentType">Content type override</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV2#WithJsonBody(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="settings">Custom JSON serializer settings</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV2#WithJsonBody(System.Object,Newtonsoft.Json.JsonSerializerSettings,System.String)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="settings">Custom JSON serializer settings</param>
            <param name="contentType">Content type override</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV2#WithBody(System.String,System.String)">
            <summary>
            A pre-formatted body which should be used as-is for the request 
            </summary>
            <param name="body">Request body</param>
            <param name="contentType">Content type</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV2#WillRespond">
            <summary>
            Define the response to this request
            </summary>
            <returns>Response builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#Given(System.String)">
            <summary>
            Add a provider state
            </summary>
            <param name="providerState">Provider state description</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#Given(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Add a provider state with one or more parameters
            </summary>
            <param name="providerState">Provider state description</param>
            <param name="parameters">Provider state parameters</param>
            <returns>Flient builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#WithRequest(System.Net.Http.HttpMethod,System.String)">
            <summary>
            Set the request
            </summary>
            <param name="method">Request method</param>
            <param name="path">Request path</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#WithRequest(System.String,System.String)">
            <summary>
            Set the request
            </summary>
            <param name="method">Request method</param>
            <param name="path">Request path</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#WithQuery(System.String,System.String)">
            <summary>
            Add a query string parameter
            </summary>
            <param name="key">Query parameter key</param>
            <param name="value">Query parameter value</param>
            <returns>Fluent builder</returns>
            <remarks>You can add a query parameter with the same key multiple times</remarks>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#WithQuery(System.String,PactNet.Matchers.IMatcher)">
            <summary>
            Add a query parameter matcher
            </summary>
            <param name="key">Query parameter key</param>
            <param name="matcher">Query parameter matcher</param>
            <returns>Fluent builder</returns>
            <remarks>You can add a query parameter with the same key multiple times</remarks>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#WithHeader(System.String,System.String)">
            <summary>
            Add a request header
            </summary>
            <param name="key">Header key</param>
            <param name="value">Header value</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#WithHeader(System.String,PactNet.Matchers.IMatcher)">
            <summary>
            Add a request header matcher
            </summary>
            <param name="key">Header key</param>
            <param name="matcher">Header value matcher</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#WithJsonBody(System.Object)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#WithJsonBody(System.Object,System.String)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="contentType">Content type override</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#WithJsonBody(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="settings">Custom JSON serializer settings</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#WithJsonBody(System.Object,Newtonsoft.Json.JsonSerializerSettings,System.String)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="settings">Custom JSON serializer settings</param>
            <param name="contentType">Content type override</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#WithBody(System.String,System.String)">
            <summary>
            A pre-formatted body which should be used as-is for the request 
            </summary>
            <param name="body">Request body</param>
            <param name="contentType">Content type</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.PactNet#IRequestBuilderV3#WillRespond">
            <summary>
            Define the response to this request
            </summary>
            <returns>Response builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.Given(System.String)">
            <summary>
            Add a provider state
            </summary>
            <param name="providerState">Provider state description</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.Given(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Add a provider state with one or more parameters
            </summary>
            <param name="providerState">Provider state description</param>
            <param name="parameters">Provider state parameters</param>
            <returns>Flient builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.WithRequest(System.Net.Http.HttpMethod,System.String)">
            <summary>
            Set the request
            </summary>
            <param name="method">Request method</param>
            <param name="path">Request path</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.WithRequest(System.String,System.String)">
            <summary>
            Set the request
            </summary>
            <param name="method">Request method</param>
            <param name="path">Request path</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.WithQuery(System.String,System.String)">
            <summary>
            Add a query string parameter
            </summary>
            <param name="key">Query parameter key</param>
            <param name="value">Query parameter value</param>
            <returns>Fluent builder</returns>
            <remarks>You can add a query parameter with the same key multiple times</remarks>
        </member>
        <member name="M:PactNet.RequestBuilder.WithQuery(System.String,PactNet.Matchers.IMatcher)">
            <summary>
            Add a query parameter matcher
            </summary>
            <param name="key">Query parameter key</param>
            <param name="matcher">Query parameter matcher</param>
            <returns>Fluent builder</returns>
            <remarks>You can add a query parameter with the same key multiple times</remarks>
        </member>
        <member name="M:PactNet.RequestBuilder.WithHeader(System.String,System.String)">
            <summary>
            Add a request header
            </summary>
            <param name="key">Header key</param>
            <param name="value">Header value</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.WithHeader(System.String,PactNet.Matchers.IMatcher)">
            <summary>
            Add a request header matcher
            </summary>
            <param name="key">Header key</param>
            <param name="matcher">Header value matcher</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.WithJsonBody(System.Object)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.WithJsonBody(System.Object,System.String)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="contentType">Content type override</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.WithJsonBody(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="settings">Custom JSON serializer settings</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.WithJsonBody(System.Object,Newtonsoft.Json.JsonSerializerSettings,System.String)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="settings">Custom JSON serializer settings</param>
            <param name="contentType">Content type override</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.WithBody(System.String,System.String)">
            <summary>
            A pre-formatted body which should be used as-is for the request 
            </summary>
            <param name="body">Request body</param>
            <param name="contentType">Content type</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.RequestBuilder.WillRespond">
            <summary>
            Define the response to this request
            </summary>
            <returns>Response builder</returns>
        </member>
        <member name="T:PactNet.ResponseBuilder">
            <summary>
            Mock response builder
            </summary>
        </member>
        <member name="M:PactNet.ResponseBuilder.#ctor(PactNet.Drivers.IHttpInteractionDriver,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.ResponseBuilder"/> class.
            </summary>
            <param name="driver">Interaction driver</param>
            <param name="defaultSettings">Default JSON serializer settings</param>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV2#WithStatus(System.Net.HttpStatusCode)">
            <summary>
            Set response status code
            </summary>
            <param name="status">Response status code</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV2#WithStatus(System.UInt16)">
            <summary>
            Set response status code
            </summary>
            <param name="status">Response status code</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV2#WithHeader(System.String,System.String)">
            <summary>
            Add a response header
            </summary>
            <param name="key">Header key</param>
            <param name="value">Header value</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV2#WithHeader(System.String,PactNet.Matchers.IMatcher)">
            <summary>
            Add a response header matcher
            </summary>
            <param name="key">Header key</param>
            <param name="matcher">Header value matcher</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV2#WithJsonBody(System.Object)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV2#WithJsonBody(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="settings">Custom JSON serializer settings</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV2#WithBody(System.String,System.String)">
            <summary>
            A pre-formatted body which should be used as-is for the response 
            </summary>
            <param name="body">Response body</param>
            <param name="contentType">Content type</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV3#WithStatus(System.Net.HttpStatusCode)">
            <summary>
            Set response status code
            </summary>
            <param name="status">Response status code</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV3#WithStatus(System.UInt16)">
            <summary>
            Set response status code
            </summary>
            <param name="status">Response status code</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV3#WithHeader(System.String,System.String)">
            <summary>
            Add a response header
            </summary>
            <param name="key">Header key</param>
            <param name="value">Header value</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV3#WithHeader(System.String,PactNet.Matchers.IMatcher)">
            <summary>
            Add a response header matcher
            </summary>
            <param name="key">Header key</param>
            <param name="matcher">Header value matcher</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV3#WithJsonBody(System.Object)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV3#WithJsonBody(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="settings">Custom JSON serializer settings</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.PactNet#IResponseBuilderV3#WithBody(System.String,System.String)">
            <summary>
            A pre-formatted body which should be used as-is for the response 
            </summary>
            <param name="body">Response body</param>
            <param name="contentType">Content type</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.WithStatus(System.Net.HttpStatusCode)">
            <summary>
            Set response status code
            </summary>
            <param name="status">Response status code</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.WithStatus(System.UInt16)">
            <summary>
            Set response status code
            </summary>
            <param name="status">Response status code</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.WithHeader(System.String,System.String)">
            <summary>
            Add a response header
            </summary>
            <param name="key">Header key</param>
            <param name="value">Header value</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.WithHeader(System.String,PactNet.Matchers.IMatcher)">
            <summary>
            Add a response header
            </summary>
            <param name="key">Header key</param>
            <param name="matcher">Header value matcher</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.WithJsonBody(System.Object)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.WithJsonBody(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Set a body which is serialised as JSON
            </summary>
            <param name="body">Request body</param>
            <param name="settings">Custom JSON serializer settings</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.ResponseBuilder.WithBody(System.String,System.String)">
            <summary>
            A pre-formatted body which should be used as-is for the response 
            </summary>
            <param name="body">Response body</param>
            <param name="contentType">Content type</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="T:PactNet.Verifier.InteropVerifierProvider">
            <summary>
            Native pact verifier
            </summary>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.#ctor(PactNet.Verifier.PactVerifierConfig)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.InteropVerifierProvider"/> class.
            </summary>
            <param name="config">Pact verifier config</param>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.Initialise">
            <summary>
            Initialise the verifier
            </summary>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.SetProviderInfo(System.String,System.String,System.String,System.UInt16,System.String)">
            <summary>
            Set provider info
            </summary>
            <param name="name">Name of the provider</param>
            <param name="scheme">Provider URI scheme</param>
            <param name="host">Provider URI host</param>
            <param name="port">Provider URI port</param>
            <param name="path">Provider URI path</param>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.SetFilterInfo(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Set filter info. Null arguments indicate the option is unused
            </summary>
            <param name="description">Filter by description</param>
            <param name="state">Filter by provider state</param>
            <param name="noState">Filter to only interactions with (false) or without (true) provider state</param>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.SetProviderState(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Set the provider state endpoint
            </summary>
            <param name="url">URL of the endpoint</param>
            <param name="teardown">Invoke a teardown to the provider state endpoint after each interaction</param>
            <param name="body">Use request body for provider state requests instead of query params</param>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.SetVerificationOptions(System.Boolean,System.TimeSpan)">
            <summary>
            Set verification options
            </summary>
            <param name="disableSslVerification">Disable SSL verification</param>
            <param name="requestTimeout">Request timeout</param>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.SetPublishOptions(System.String,System.Uri,System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            Set publish options
            </summary>
            <param name="providerVersion">Provider version</param>
            <param name="buildUrl">URL of the build that ran the verification</param>
            <param name="providerTags">Provider tags</param>
            <param name="providerBranch">Provider branch</param>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.SetConsumerFilters(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Set consumer filters
            </summary>
            <param name="consumerFilters">Consumer filters</param>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.AddCustomHeader(System.String,System.String)">
            <summary>
            Add a header which will be used in all calls from the verifier to the provider, for example
            an Authorization header with a valid auth token
            </summary>
            <param name="name">Header name</param>
            <param name="value">Header value</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.AddFileSource(System.IO.FileInfo)">
            <summary>
            Add a file source
            </summary>
            <param name="file">File</param>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.AddDirectorySource(System.IO.DirectoryInfo)">
            <summary>
            Add a directory source
            </summary>
            <param name="directory">Directory</param>
            <remarks>Can be used with <see cref="M:PactNet.Verifier.IVerifierProvider.SetConsumerFilters(System.Collections.Generic.ICollection{System.String})"/> to filter the files in the directory</remarks>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.AddUrlSource(System.Uri,System.String,System.String,System.String)">
            <summary>
            Add a URL source
            </summary>
            <param name="url">URL to the pact file</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="token">Authentication token</param>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.AddBrokerSource(System.Uri,System.String,System.String,System.String,System.Boolean,System.Nullable{System.DateTime},System.Collections.Generic.ICollection{System.String},System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Add a pact broker source
            </summary>
            <param name="url">Pact broker URL</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="token">Authentication token</param>
            <param name="enablePending">Enable pending pacts</param>
            <param name="includeWipPactsSince">Include WIP pacts since this date</param>
            <param name="providerTags">Provider tags</param>
            <param name="providerBranch">Provider branch</param>
            <param name="consumerVersionSelectors">Consumer version selectors</param>
            <param name="consumerVersionTags">Consumer version tags</param>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.Execute">
            <summary>
            Verify the pact from the given args
            </summary>
            <exception cref="T:PactNet.Exceptions.PactFailureException">Verification failed</exception>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.Finalize">
            <summary>
            Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.ReleaseUnmanagedResources">
            <summary>
            Release unmanaged resources
            </summary>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.ToSafeByte(System.Nullable{System.Boolean})">
            <summary>
            Convert a nullable bool to a byte indicating true/false
            </summary>
            <param name="value">Bool value</param>
            <returns>Byte indicating true or false</returns>
        </member>
        <member name="M:PactNet.Verifier.InteropVerifierProvider.PrintOutput">
            <summary>
            Print output and logs of the verifier
            </summary>
        </member>
        <member name="T:PactNet.Verifier.IVerifierProvider">
            <summary>
            Provider of the backend verification process
            </summary>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.Initialise">
            <summary>
            Initialise the verifier
            </summary>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.SetProviderInfo(System.String,System.String,System.String,System.UInt16,System.String)">
            <summary>
            Set provider info
            </summary>
            <param name="name">Name of the provider</param>
            <param name="scheme">Provider URI scheme</param>
            <param name="host">Provider URI host</param>
            <param name="port">Provider URI port</param>
            <param name="path">Provider URI path</param>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.SetFilterInfo(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Set filter info. Null arguments indicate the option is unused
            </summary>
            <param name="description">Filter by description</param>
            <param name="state">Filter by provider state</param>
            <param name="noState">Filter to only interactions with (false) or without (true) provider state</param>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.SetProviderState(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Set the provider state endpoint
            </summary>
            <param name="url">URL of the endpoint</param>
            <param name="teardown">Invoke a teardown to the provider state endpoint after each interaction</param>
            <param name="body">Use request body for provider state requests instead of query params</param>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.SetVerificationOptions(System.Boolean,System.TimeSpan)">
            <summary>
            Set verification options
            </summary>
            <param name="disableSslVerification">Disable SSL verification</param>
            <param name="requestTimeout">Request timeout</param>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.SetPublishOptions(System.String,System.Uri,System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            Set publish options
            </summary>
            <param name="providerVersion">Provider version</param>
            <param name="buildUrl">URL of the build that ran the verification</param>
            <param name="providerTags">Provider tags</param>
            <param name="providerBranch">Provider branch</param>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.SetConsumerFilters(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Set consumer filters
            </summary>
            <param name="consumerFilters">Consumer filters</param>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.AddCustomHeader(System.String,System.String)">
            <summary>
            Add a header which will be used in all calls from the verifier to the provider, for example
            an Authorization header with a valid auth token
            </summary>
            <param name="name">Header name</param>
            <param name="value">Header value</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.AddFileSource(System.IO.FileInfo)">
            <summary>
            Add a file source
            </summary>
            <param name="file">File</param>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.AddDirectorySource(System.IO.DirectoryInfo)">
            <summary>
            Add a directory source
            </summary>
            <param name="directory">Directory</param>
            <remarks>Can be used with <see cref="M:PactNet.Verifier.IVerifierProvider.SetConsumerFilters(System.Collections.Generic.ICollection{System.String})"/> to filter the files in the directory</remarks>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.AddUrlSource(System.Uri,System.String,System.String,System.String)">
            <summary>
            Add a URL source
            </summary>
            <param name="url">URL to the pact file</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="token">Authentication token</param>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.AddBrokerSource(System.Uri,System.String,System.String,System.String,System.Boolean,System.Nullable{System.DateTime},System.Collections.Generic.ICollection{System.String},System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Add a pact broker source
            </summary>
            <param name="url">Pact broker URL</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="token">Authentication token</param>
            <param name="enablePending">Enable pending pacts</param>
            <param name="includeWipPactsSince">Include WIP pacts since this date</param>
            <param name="providerTags">Provider tags</param>
            <param name="providerBranch">Provider branch</param>
            <param name="consumerVersionSelectors">Consumer version selectors</param>
            <param name="consumerVersionTags">Consumer version tags</param>
        </member>
        <member name="M:PactNet.Verifier.IVerifierProvider.Execute">
            <summary>
            Verify the pact from the given args
            </summary>
            <exception cref="T:PactNet.Exceptions.PactFailureException">Verification failed</exception>
        </member>
        <member name="T:PactNet.Verifier.Messaging.MessageScenarioBuilder">
            <summary>
            Defines the message scenario builder
            </summary>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessageScenarioBuilder.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.Messaging.MessageScenarioBuilder"/> class.
            </summary>
            <param name="description">Scenario description</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessageScenarioBuilder.WithMetadata(System.Object)">
            <summary>
            Set the metadata of the message content
            </summary>
            <param name="metadata">the metadata</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessageScenarioBuilder.WithContent(System.Func{System.Object})">
            <summary>
            Set the action of the scenario
            </summary>
            <param name="factory">Content factory</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessageScenarioBuilder.WithContent(System.Func{System.Object},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Set the content of the scenario
            </summary>
            <param name="factory">Content factory</param>
            <param name="settings">Custom JSON serializer settings</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessageScenarioBuilder.WithContentAsync(System.Func{System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Set the action of the scenario
            </summary>
            <param name="factory">Content factory</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessageScenarioBuilder.WithContentAsync(System.Func{System.Threading.Tasks.Task{System.Object}},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Set the content of the scenario
            </summary>
            <param name="factory">Content factory</param>
            <param name="settings">Custom JSON serializer settings</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessageScenarioBuilder.Build">
            <summary>
            Build the scenario
            </summary>
        </member>
        <member name="T:PactNet.Verifier.Messaging.MessageScenarios">
            <summary>
            The scenarios used to generate messages when verifying messaging pacts
            </summary>
        </member>
        <member name="P:PactNet.Verifier.Messaging.MessageScenarios.Scenarios">
            <summary>
            Configured scenarios
            </summary>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessageScenarios.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.Messaging.MessageScenarios"/> class.
            </summary>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessageScenarios.Add(System.String,System.Func{System.Object})">
            <summary>
            Add a message scenario
            </summary>
            <param name="description">Scenario description</param>
            <param name="factory">Message content factory</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessageScenarios.Add(System.String,System.Action{PactNet.Verifier.Messaging.IMessageScenarioBuilder})">
            <summary>
            Add a message scenario
            </summary>
            <param name="description">Scenario description</param>
            <param name="configure">Scenario configure</param>
            <returns></returns>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessageScenarios.Add(System.String,System.Func{PactNet.Verifier.Messaging.IMessageScenarioBuilder,System.Threading.Tasks.Task})">
            <summary>
            Add a message scenario
            </summary>
            <param name="description">Scenario description</param>
            <param name="configure">Scenario configure</param>
            <returns></returns>
        </member>
        <member name="T:PactNet.Verifier.Messaging.MessagingProvider">
            <summary>
            Messaging provider service, which simulates messaging responses in order to verify interactions
            </summary>
        </member>
        <member name="P:PactNet.Verifier.Messaging.MessagingProvider.Scenarios">
            <summary>
            Scenarios configured for the provider
            </summary>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessagingProvider.#ctor(PactNet.Verifier.PactVerifierConfig,PactNet.Verifier.Messaging.IMessageScenarios)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.Messaging.MessagingProvider"/> class.
            </summary>
            <param name="config">Verifier config</param>
            <param name="scenarios">Message scenarios</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessagingProvider.Start(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Start the provider service
            </summary>
            <param name="settings">Default JSON serializer settings</param>
            <returns>URI of the started service</returns>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessagingProvider.FindUnusedPort">
            <summary>
            Find an unused port on which to host the messaging server
            </summary>
            <returns>Unused port</returns>
            <exception cref="T:System.InvalidOperationException">No local ports were available</exception>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessagingProvider.HandleRequest">
            <summary>
            Handle an incoming request from the Pact Core messaging driver
            </summary>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessagingProvider.HandleInteraction(System.Net.HttpListenerContext,PactNet.Verifier.Messaging.MessageInteraction)">
            <summary>
            Handle an interaction request
            </summary>
            <param name="context">HTTP context</param>
            <param name="interaction">Interaction</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessagingProvider.BadRequestResponse(System.Net.HttpListenerContext,System.String)">
            <summary>
            Send a 400 Bad Request response
            </summary>
            <param name="context">HTTP context</param>
            <param name="message">Error message</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessagingProvider.NotFoundResponse(System.Net.HttpListenerContext,System.String)">
            <summary>
            Send a 404 Not Found response
            </summary>
            <param name="context">HTTP context</param>
            <param name="message">Error message</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessagingProvider.NotAllowedResponse(System.Net.HttpListenerContext,System.String)">
            <summary>
            Send a 405 Not Allowed response
            </summary>
            <param name="context">HTTP context</param>
            <param name="message">Error message</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessagingProvider.ErrorResponse(System.Net.HttpListenerContext,System.String)">
            <summary>
            Send a 500 Internal Server Error response
            </summary>
            <param name="context">HTTP context</param>
            <param name="message">Error message</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessagingProvider.OkResponse(System.Net.HttpListenerContext,System.String)">
            <summary>
            Send a 200 OK response
            </summary>
            <param name="context">HTTP context</param>
            <param name="message">Response body</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessagingProvider.WriteOutput(System.Net.HttpListenerResponse,System.Net.HttpStatusCode,System.String,System.String)">
            <summary>
            Write the response
            </summary>
            <param name="response">Response context</param>
            <param name="status">Status code</param>
            <param name="body">Response body</param>
            <param name="contentType">Content type</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.MessagingProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:PactNet.Verifier.Messaging.PactVerifierMessagingProvider">
            <summary>
            Configured the messaging scenarios
            </summary>
        </member>
        <member name="M:PactNet.Verifier.Messaging.PactVerifierMessagingProvider.#ctor(PactNet.Verifier.IVerifierProvider,PactNet.Verifier.Messaging.IMessageScenarios,PactNet.Verifier.PactVerifierConfig)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.Messaging.PactVerifierMessagingProvider"/> class.
            </summary>
            <param name="provider">Pact verifier provider</param>
            <param name="scenarios">Message scenarios</param>
            <param name="config">Pact verifier config</param>
        </member>
        <member name="M:PactNet.Verifier.Messaging.PactVerifierMessagingProvider.WithProviderMessages(System.Action{PactNet.Verifier.Messaging.IMessageScenarios})">
            <summary>
            Configure provider messages
            </summary>
            <param name="scenarios">Scenario configuration</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="T:PactNet.Verifier.PactBrokerOptions">
            <summary>
            Native pact broker options
            </summary>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.#ctor(PactNet.Verifier.IVerifierProvider,System.Uri)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.PactBrokerOptions"/> class.
            </summary>
            <param name="provider">Pact verifier provider</param>
            <param name="brokerUri">Pact broker URI</param>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.BasicAuthentication(System.String,System.String)">
            <summary>
            Use Basic authentication with the Pact Broker
            </summary>
            <param name="username">Pact broker username</param>
            <param name="password">Pact broker password</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.TokenAuthentication(System.String)">
            <summary>
            Use Token authentication with the Pact Broker
            </summary>
            <param name="token">Auth token</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.EnablePending">
            <summary>
            Enable pending pacts
            </summary>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.ProviderBranch(System.String)">
            <summary>
            Set the provider branch for retrieving pacts
            </summary>
            <param name="branch">Branch name</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.ProviderTags(System.String[])">
            <summary>
            Set the provider tags for retrieving pacts
            </summary>
            <param name="tags">Tags</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.ConsumerTags(System.String[])">
            <summary>
            Consumer tag versions to retrieve
            </summary>
            <param name="tags">Consumer tags</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.ConsumerVersionSelectors(System.Collections.Generic.ICollection{PactNet.Verifier.ConsumerVersionSelector})">
            <summary>
            Consumer version selectors to control which pacts are returned from the broker
            </summary>
            <param name="selectors">Consumer version selectors</param>
            <returns>Fluent builder</returns>
            <remarks>See <see href="https://docs.pact.io/pact_broker/advanced_topics/consumer_version_selectors"/></remarks>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.ConsumerVersionSelectors(PactNet.Verifier.ConsumerVersionSelector[])">
            <summary>
            Consumer version selectors to control which pacts are returned from the broker
            </summary>
            <param name="selectors">Consumer version selectors</param>
            <returns>Fluent builder</returns>
            <remarks>See <see href="https://docs.pact.io/pact_broker/advanced_topics/consumer_version_selectors"/></remarks>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.IncludeWipPactsSince(System.DateTime)">
            <summary>
            Include WIP pacts since the given date
            </summary>
            <param name="date">WIP cut-off date</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.PublishResults(System.String)">
            <summary>
            Publish results to the pact broker without any additional settings
            </summary>
            <param name="providerVersion">Provider version</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.PublishResults(System.String,System.Action{PactNet.Verifier.IPactBrokerPublishOptions})">
            <summary>
            Publish results to the pact broker
            </summary>
            <param name="providerVersion">Provider version</param>
            <param name="configure">Configure the publish options</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.PublishResults(System.Boolean,System.String)">
            <summary>
            Publish results to the pact broker without any additional settings, if the condition is met
            </summary>
            <param name="condition">Only publish if this condition is true</param>
            <param name="providerVersion">Provider version</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.PublishResults(System.Boolean,System.String,System.Action{PactNet.Verifier.IPactBrokerPublishOptions})">
            <summary>
            Publish results to the pact broker if the condition is met
            </summary>
            <param name="condition">Only publish if this condition is true</param>
            <param name="providerVersion">Provider version</param>
            <param name="configure">Configure the publish options</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerOptions.Apply">
            <summary>
            Finalise the configuration with the provider
            </summary>
        </member>
        <member name="T:PactNet.Verifier.PactBrokerPublishOptions">
            <summary>
            Pact broker publish options
            </summary>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerPublishOptions.#ctor(PactNet.Verifier.IVerifierProvider,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.PactBrokerPublishOptions"/> class.
            </summary>
            <param name="provider">Pact verifier provider</param>
            <param name="version">Provider version</param>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerPublishOptions.ProviderTags(System.String[])">
            <summary>
            Tag the provider with the given tags
            </summary>
            <param name="tags">Tags to apply</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerPublishOptions.ProviderBranch(System.String)">
            <summary>
            Set the branch of the provider
            </summary>
            <param name="branch">Provider branch</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerPublishOptions.BuildUri(System.Uri)">
            <summary>
            URI of the build that performed the verification
            </summary>
            <param name="uri">Build URI</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactBrokerPublishOptions.Apply">
            <summary>
            Apply the configured values to the verifier
            </summary>
        </member>
        <member name="T:PactNet.Verifier.PactUriOptions">
            <summary>
            Options for URI pact sources
            </summary>
        </member>
        <member name="M:PactNet.Verifier.PactUriOptions.#ctor(PactNet.Verifier.IVerifierProvider,System.Uri)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.PactUriOptions"/> class.
            </summary>
            <param name="provider">Pact verifier provider</param>
            <param name="uri">Pact file URI</param>
        </member>
        <member name="M:PactNet.Verifier.PactUriOptions.BasicAuthentication(System.String,System.String)">
            <summary>
            Use Basic authentication to access the URI
            </summary>
            <param name="username">Pact broker username</param>
            <param name="password">Pact broker password</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactUriOptions.TokenAuthentication(System.String)">
            <summary>
            Use Token authentication to access the URI
            </summary>
            <param name="token">Auth token</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactUriOptions.PublishResults(System.String)">
            <summary>
            Publish results to the pact broker without any additional settings
            </summary>
            <param name="providerVersion">Provider version</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactUriOptions.PublishResults(System.String,System.Action{PactNet.Verifier.IPactBrokerPublishOptions})">
            <summary>
            Publish results to the pact broker
            </summary>
            <param name="providerVersion">Provider version</param>
            <param name="configure">Configure the publish options</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactUriOptions.PublishResults(System.Boolean,System.String)">
            <summary>
            Publish results to the pact broker without any additional settings, if the condition is met
            </summary>
            <param name="condition">Only publish if this condition is true</param>
            <param name="providerVersion">Provider version</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactUriOptions.PublishResults(System.Boolean,System.String,System.Action{PactNet.Verifier.IPactBrokerPublishOptions})">
            <summary>
            Publish results to the pact broker if the condition is met
            </summary>
            <param name="condition">Only publish if this condition is true</param>
            <param name="providerVersion">Provider version</param>
            <param name="configure">Configure the publish options</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactUriOptions.Apply">
            <summary>
            Apply the configured options
            </summary>
        </member>
        <member name="T:PactNet.Verifier.PactVerifier">
            <summary>
            Pact verifier
            </summary>
        </member>
        <member name="M:PactNet.Verifier.PactVerifier.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.PactVerifier"/> class.
            </summary>
        </member>
        <member name="M:PactNet.Verifier.PactVerifier.#ctor(PactNet.Verifier.PactVerifierConfig)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.PactVerifier"/> class.
            </summary>
            <param name="config">Pact verifier config</param>
        </member>
        <member name="M:PactNet.Verifier.PactVerifier.#ctor(PactNet.Verifier.IVerifierProvider,PactNet.Verifier.Messaging.IMessagingProvider,PactNet.Verifier.PactVerifierConfig)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.PactVerifier"/> class.
            </summary>
            <param name="provider">Verifier provider</param>
            <param name="messagingProvider">Messaging provider</param>
            <param name="config">Pact verifier config</param>
        </member>
        <member name="M:PactNet.Verifier.PactVerifier.ServiceProvider(System.String,System.Uri)">
            <summary>
            Set the provider details
            </summary>
            <param name="providerName">Name of the provider</param>
            <param name="pactUri">URI of the running service</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifier.MessagingProvider(System.String)">
            <summary>
            Set the provider details of a messaging provider
            </summary>
            <param name="providerName">Name of the provider</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifier.MessagingProvider(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Set the provider details of a messaging provider
            </summary>
            <param name="providerName">Name of the provider</param>
            <param name="settings">Default JSON serialisation settings</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifier.InitialiseProvider(System.String,System.Uri)">
            <summary>
            Initialise the verifier provider
            </summary>
            <param name="providerName"></param>
            <param name="pactUri"></param>
        </member>
        <member name="M:PactNet.Verifier.PactVerifier.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:PactNet.Verifier.PactVerifierProvider">
            <summary>
            Native pact verifier provider type state
            </summary>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierProvider.#ctor(PactNet.Verifier.IVerifierProvider,PactNet.Verifier.PactVerifierConfig)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.PactVerifierProvider"/> class.
            </summary>
            <param name="provider">Verifier provider</param>
            <param name="config">Pact verifier config</param>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierProvider.WithFileSource(System.IO.FileInfo)">
            <summary>
            Verify a pact file directly
            </summary>
            <param name="pactFile">Pact file path</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierProvider.WithDirectorySource(System.IO.DirectoryInfo,System.String[])">
            <summary>
            Verify all pacts in the given directory which match the given consumers (or all pact files if no consumers are specified)
            </summary>
            <param name="directory">Directory containing the pact files</param>
            <param name="consumers">(Optional) Consumer names to filter on</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierProvider.WithUriSource(System.Uri)">
            <summary>
            Verify a pact from a URI
            </summary>
            <param name="pactUri">Pact file URI</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierProvider.WithUriSource(System.Uri,System.Action{PactNet.Verifier.IPactUriOptions})">
            <summary>
            Verify a pact from a URI
            </summary>
            <param name="pactUri">Pact file URI</param>
            <param name="configure">Configure URI options</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierProvider.WithPactBrokerSource(System.Uri)">
            <summary>
            Use the pact broker to retrieve pact files with default options
            </summary>
            <param name="brokerBaseUri">Base URI for the broker</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierProvider.WithPactBrokerSource(System.Uri,System.Action{PactNet.Verifier.IPactBrokerOptions})">
            <summary>
            Use the pact broker to retrieve pact files
            </summary>
            <param name="brokerBaseUri">Base URI for the broker</param>
            <param name="configure">Configure pact broker options</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="T:PactNet.Verifier.PactVerifierSource">
            <summary>
            Native pact verifier source type state
            </summary>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierSource.#ctor(PactNet.Verifier.IVerifierProvider,PactNet.Verifier.PactVerifierConfig)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.PactVerifierSource"/> class.
            </summary>
            <param name="provider">Pact verifier provider</param>
            <param name="config">Verifier config</param>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierSource.WithProviderStateUrl(System.Uri)">
            <summary>
            Set up the provider state setup URI so the service can configure states
            </summary>
            <param name="providerStateUri">Provider state URI</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierSource.WithProviderStateUrl(System.Uri,System.Action{PactNet.Verifier.IProviderStateOptions})">
            <summary>
            Set up the provider state setup URL so the service can configure states
            </summary>
            <param name="providerStateUri">Provider state setup URI</param>
            <param name="configure">Configure provider state options</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierSource.WithFilter(System.String,System.String)">
            <summary>
            Filter the interactions to only those matching the given description and/or provider state
            </summary>
            <param name="description">Interaction description. All interactions are verified if this is null</param>
            <param name="providerState">Provider state description. All provider states are verified if this is null</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierSource.WithRequestTimeout(System.TimeSpan)">
            <summary>
            Set the timeout for all requests to the provider
            </summary>
            <param name="timeout">Timeout</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierSource.WithSslVerificationDisabled">
            <summary>
            Disable certificate verification for HTTPS requests
            </summary>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierSource.WithCustomHeader(System.String,System.String)">
            <summary>
            Add a header which will be used in all calls from the verifier to the provider, for example
            an Authorization header with a valid auth token
            </summary>
            <param name="name">Header name</param>
            <param name="value">Header value</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.PactVerifierSource.Verify">
            <summary>
            Verify provider interactions
            </summary>
            <exception cref="T:PactNet.Exceptions.PactFailureException">Verification failed</exception>
        </member>
        <member name="T:PactNet.Verifier.ProviderStateOptions">
            <summary>
            Provider state options
            </summary>
        </member>
        <member name="M:PactNet.Verifier.ProviderStateOptions.#ctor(PactNet.Verifier.IVerifierProvider,System.Uri)">
            <summary>
            Initialises a new instance of the <see cref="T:PactNet.Verifier.ProviderStateOptions"/> class.
            </summary>
            <param name="provider">Pact verifier provider</param>
            <param name="providerStateUri">Provider states URI</param>
        </member>
        <member name="M:PactNet.Verifier.ProviderStateOptions.WithTeardown">
            <summary>
            Provide request callbacks after each interaction is verified
            </summary>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.ProviderStateOptions.WithStyle(PactNet.Verifier.ProviderStateStyle)">
            <summary>
            Configure the style in which the provider state endpoint is invoked
            </summary>
            <param name="style">Provider state style</param>
            <returns>Fluent builder</returns>
        </member>
        <member name="M:PactNet.Verifier.ProviderStateOptions.Apply">
            <summary>
            Apply the configured values to the verifier
            </summary>
        </member>
    </members>
</doc>
